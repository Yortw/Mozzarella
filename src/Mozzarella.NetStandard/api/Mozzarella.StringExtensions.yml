### YamlMime:ManagedReference
items:
- uid: Mozzarella.StringExtensions
  commentId: T:Mozzarella.StringExtensions
  id: StringExtensions
  parent: Mozzarella
  children:
  - Mozzarella.StringExtensions.AddPrefix(System.String,System.String)
  - Mozzarella.StringExtensions.AddPrefix(System.String,System.String,System.Boolean)
  - Mozzarella.StringExtensions.AddSuffix(System.String,System.String)
  - Mozzarella.StringExtensions.AddSuffix(System.String,System.String,System.Boolean)
  - Mozzarella.StringExtensions.AfterFirst(System.String,System.String)
  - Mozzarella.StringExtensions.AfterFirst(System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.AfterLast(System.String,System.String)
  - Mozzarella.StringExtensions.AfterLast(System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.BeforeFirst(System.String,System.String)
  - Mozzarella.StringExtensions.BeforeFirst(System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.BeforeLast(System.String,System.String)
  - Mozzarella.StringExtensions.BeforeLast(System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.CICompare(System.String,System.String)
  - Mozzarella.StringExtensions.CIContains(System.String,System.String)
  - Mozzarella.StringExtensions.CIEquals(System.String,System.String)
  - Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  - Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  - Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  - Mozzarella.StringExtensions.Coalesce(System.String,System.String)
  - Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  - Mozzarella.StringExtensions.Contains(System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.IndexOfFirstDifference(System.String,System.String)
  - Mozzarella.StringExtensions.IsAllDigits(System.String)
  - Mozzarella.StringExtensions.IsAlphanumeric(System.String)
  - Mozzarella.StringExtensions.IsNullOrEmpty(System.String)
  - Mozzarella.StringExtensions.IsNullOrWhiteSpace(System.String)
  - Mozzarella.StringExtensions.IsOnlyAlphas(System.String)
  - Mozzarella.StringExtensions.IsOnlyDigits(System.String)
  - Mozzarella.StringExtensions.Like(System.String,System.String,System.Boolean)
  - Mozzarella.StringExtensions.OCICompare(System.String,System.String)
  - Mozzarella.StringExtensions.OCIContains(System.String,System.String)
  - Mozzarella.StringExtensions.OCIEquals(System.String,System.String)
  - Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  - Mozzarella.StringExtensions.OEquals(System.String,System.String)
  - Mozzarella.StringExtensions.RemoveAllWhiteSpace(System.String)
  - Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  - Mozzarella.StringExtensions.StripNonDigits(System.String)
  - Mozzarella.StringExtensions.StripPrefix(System.String,System.String)
  - Mozzarella.StringExtensions.StripPrefix(System.String,System.String,System.Boolean)
  - Mozzarella.StringExtensions.StripSuffix(System.String,System.String)
  - Mozzarella.StringExtensions.StripSuffix(System.String,System.String,System.Boolean)
  - Mozzarella.StringExtensions.Truncate(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: StringExtensions
  nameWithType: StringExtensions
  fullName: Mozzarella.StringExtensions
  type: Class
  source:
    id: StringExtensions
    path: ''
    startLine: 1113
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nExtension methods for <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class StringExtensions
    content.vb: Public Module StringExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mozzarella.StringExtensions.Truncate(System.String,System.Int32)
  commentId: M:Mozzarella.StringExtensions.Truncate(System.String,System.Int32)
  id: Truncate(System.String,System.Int32)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Truncate(String, Int32)
  nameWithType: StringExtensions.Truncate(String, Int32)
  fullName: Mozzarella.StringExtensions.Truncate(System.String, System.Int32)
  type: Method
  source:
    id: Truncate
    path: ''
    startLine: 1126
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is longer than <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxLength</code> it is truncated at that character position, otherwise the original string is returned.\n"
  remarks: "\n<p>If value is null, null is returned. If <code data-dev-comment-type=\"paramref\" class=\"paramref\">maxLength</code> is zero, <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> is returned.</p>\n"
  example: []
  syntax:
    content: public static string Truncate(this string value, int maxLength)
    parameters:
    - id: value
      type: System.String
      description: The string to truncate.
    - id: maxLength
      type: System.Int32
      description: The the point at which to truncate the string, if it exceeds that length.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that is no longer than <code data-dev-comment-type="paramref" class="paramref">maxLength</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Truncate(value As String, maxLength As Integer) As String
  overload: Mozzarella.StringExtensions.Truncate*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">maxLength</code> is less than 0.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.OCIEquals(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OCIEquals(System.String,System.String)
  id: OCIEquals(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: OCIEquals(String, String)
  nameWithType: StringExtensions.OCIEquals(String, String)
  fullName: Mozzarella.StringExtensions.OCIEquals(System.String, System.String)
  type: Method
  source:
    id: OCIEquals
    path: ''
    startLine: 1145
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms an &quot;ordinal&quot; and case *insensitive* comparison of two strings, returning a boolean indicating if they match. \n"
  remarks: "\n<p>This is equivalent to calling <xref href=\"System.String.Equals(System.String%2cSystem.String%2cSystem.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example: []
  syntax:
    content: public static bool OCIEquals(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The second value to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the values are the same (ignoring case), <code>false</code> otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OCIEquals(value As String, otherValue As String) As Boolean
  overload: Mozzarella.StringExtensions.OCIEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.OEquals(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OEquals(System.String,System.String)
  id: OEquals(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: OEquals(String, String)
  nameWithType: StringExtensions.OEquals(String, String)
  fullName: Mozzarella.StringExtensions.OEquals(System.String, System.String)
  type: Method
  source:
    id: OEquals
    path: ''
    startLine: 1160
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms an &quot;ordinal&quot; comparison of two strings, returning a boolean indicating if they match. \n"
  remarks: "\n<p>This is equivalent to calling <xref href=\"System.String.Equals(System.String%2cSystem.String%2cSystem.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example: []
  syntax:
    content: public static bool OEquals(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The second value to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the values are the same, <code>false</code> otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OEquals(value As String, otherValue As String) As Boolean
  overload: Mozzarella.StringExtensions.OEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.CIEquals(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.CIEquals(System.String,System.String)
  id: CIEquals(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: CIEquals(String, String)
  nameWithType: StringExtensions.CIEquals(String, String)
  fullName: Mozzarella.StringExtensions.CIEquals(System.String, System.String)
  type: Method
  source:
    id: CIEquals
    path: ''
    startLine: 1174
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms a case *insensitive* comparison of two strings, returning a boolean indicating if they match.\n"
  remarks: "\n<p>This is equivalent to calling <xref href=\"System.String.Equals(System.String%2cSystem.String%2cSystem.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.StringComparison.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example: []
  syntax:
    content: public static bool CIEquals(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The second value to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the values are the same (ignoring case), <code>false</code> otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CIEquals(value As String, otherValue As String) As Boolean
  overload: Mozzarella.StringExtensions.CIEquals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.OCICompare(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OCICompare(System.String,System.String)
  id: OCICompare(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: OCICompare(String, String)
  nameWithType: StringExtensions.OCICompare(String, String)
  fullName: Mozzarella.StringExtensions.OCICompare(System.String, System.String)
  type: Method
  source:
    id: OCICompare
    path: ''
    startLine: 1188
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms a case *insensitive* ordinal comparison of two strings, returning an integer indicating if they match, or one is less than/greater than the other.\n"
  remarks: "\n<p>This is equivalent to calling <xref href=\"System.String.Compare(System.String%2cSystem.String%2cSystem.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.StringComparison.OrdinalIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example: []
  syntax:
    content: public static int OCICompare(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The second value to compare.
    return:
      type: System.Int32
      description: Zero if the values are the same (ignoring case), 1 if <code data-dev-comment-type="paramref" class="paramref">value</code> greater than <code data-dev-comment-type="paramref" class="paramref">otherValue</code>, else -1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OCICompare(value As String, otherValue As String) As Integer
  overload: Mozzarella.StringExtensions.OCICompare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.CICompare(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.CICompare(System.String,System.String)
  id: CICompare(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: CICompare(String, String)
  nameWithType: StringExtensions.CICompare(String, String)
  fullName: Mozzarella.StringExtensions.CICompare(System.String, System.String)
  type: Method
  source:
    id: CICompare
    path: ''
    startLine: 1203
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms a case *insensitive* comparison of two strings, returning an integer indicating if they match, or one is less than/greater than the other.\n"
  remarks: "\n<p>This is equivalent to calling <xref href=\"System.String.Compare(System.String%2cSystem.String%2cSystem.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.StringComparison.CurrentCultureIgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example: []
  syntax:
    content: public static int CICompare(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The second value to compare.
    return:
      type: System.Int32
      description: Zero if the values are the same, 1 if <code data-dev-comment-type="paramref" class="paramref">value</code> greater than <code data-dev-comment-type="paramref" class="paramref">otherValue</code>, else -1.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CICompare(value As String, otherValue As String) As Integer
  overload: Mozzarella.StringExtensions.CICompare*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.CIContains(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.CIContains(System.String,System.String)
  id: CIContains(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: CIContains(String, String)
  nameWithType: StringExtensions.CIContains(String, String)
  fullName: Mozzarella.StringExtensions.CIContains(System.String, System.String)
  type: Method
  source:
    id: CIContains
    path: ''
    startLine: 1215
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains the substring specified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>, ignoring the case of both strings.\n"
  example: []
  syntax:
    content: public static bool CIContains(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The string to search for.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">value</code> contains the substring <code data-dev-comment-type="paramref" class="paramref">searchValue</code>, <code>false</code> otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CIContains(value As String, searchValue As String) As Boolean
  overload: Mozzarella.StringExtensions.CIContains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.OCIContains(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OCIContains(System.String,System.String)
  id: OCIContains(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: OCIContains(String, String)
  nameWithType: StringExtensions.OCIContains(String, String)
  fullName: Mozzarella.StringExtensions.OCIContains(System.String, System.String)
  type: Method
  source:
    id: OCIContains
    path: ''
    startLine: 1229
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains the substring specified by <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>, ignoring the case of both strings and using an ordinal comparison.\n"
  example: []
  syntax:
    content: public static bool OCIContains(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The string to search for.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">value</code> contains the substring <code data-dev-comment-type="paramref" class="paramref">searchValue</code>, <code>false</code> otherwise.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OCIContains(value As String, searchValue As String) As Boolean
  overload: Mozzarella.StringExtensions.OCIContains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  id: CIReplace(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: CIReplace(String, String, String)
  nameWithType: StringExtensions.CIReplace(String, String, String)
  fullName: Mozzarella.StringExtensions.CIReplace(System.String, System.String, System.String)
  type: Method
  source:
    id: CIReplace
    path: ''
    startLine: 1250
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReplaces all instances of a substring in a given string with another using a case insensitve, current culture based comparisoon.\n"
  example: []
  syntax:
    content: public static string CIReplace(this string value, string searchValue, string newValue)
    parameters:
    - id: value
      type: System.String
      description: The value to replace the substring in.
    - id: searchValue
      type: System.String
      description: The substring to be replaced.
    - id: newValue
      type: System.String
      description: The new substring to use.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the replaced parts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CIReplace(value As String, searchValue As String, newValue As String) As String
  overload: Mozzarella.StringExtensions.CIReplace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  seealso:
  - linkId: Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
    commentId: M:Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  - linkId: Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
    commentId: M:Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  id: OCIReplace(System.String,System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: OCIReplace(String, String, String)
  nameWithType: StringExtensions.OCIReplace(String, String, String)
  fullName: Mozzarella.StringExtensions.OCIReplace(System.String, System.String, System.String)
  type: Method
  source:
    id: OCIReplace
    path: ''
    startLine: 1268
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReplaces all instances of a substring in a given string with another using an ordinal and case insenstive comparison.\n"
  example: []
  syntax:
    content: public static string OCIReplace(this string value, string searchValue, string newValue)
    parameters:
    - id: value
      type: System.String
      description: The value to replace the substring in.
    - id: searchValue
      type: System.String
      description: The substring to be replaced.
    - id: newValue
      type: System.String
      description: The new substring to use.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the replaced parts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OCIReplace(value As String, searchValue As String, newValue As String) As String
  overload: Mozzarella.StringExtensions.OCIReplace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  seealso:
  - linkId: Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
    commentId: M:Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  - linkId: Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
    commentId: M:Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  id: Replace(System.String,System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Replace(String, String, String, StringComparison)
  nameWithType: StringExtensions.Replace(String, String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.Replace(System.String, System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: Replace
    path: ''
    startLine: 1285
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAn overload for <xref href=\"System.String.Replace(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> which allows manually specifying the <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> to use when locating the <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public static string Replace(this string value, string searchValue, string newValue, StringComparison stringComparison)
    parameters:
    - id: value
      type: System.String
      description: The value to replace the substring in.
    - id: searchValue
      type: System.String
      description: The substring to be replaced.
    - id: newValue
      type: System.String
      description: The new substring to use.
    - id: stringComparison
      type: System.StringComparison
      description: A value from the <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> enum specifying how strings should be compared when searching for the <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the replaced parts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Replace(value As String, searchValue As String, newValue As String, stringComparison As StringComparison) As String
  overload: Mozzarella.StringExtensions.Replace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  seealso:
  - linkId: Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
    commentId: M:Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  - linkId: Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
    commentId: M:Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IndexOfFirstDifference(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.IndexOfFirstDifference(System.String,System.String)
  id: IndexOfFirstDifference(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IndexOfFirstDifference(String, String)
  nameWithType: StringExtensions.IndexOfFirstDifference(String, String)
  fullName: Mozzarella.StringExtensions.IndexOfFirstDifference(System.String, System.String)
  type: Method
  source:
    id: IndexOfFirstDifference
    path: ''
    startLine: 1334
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the original character position of the first difference between two strings. If the strings are identical, returns -1.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValue</code> is longer than <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> but matches up to the end of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> then the index returned will be outside the length of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n"
  example: []
  syntax:
    content: public static int IndexOfFirstDifference(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to compare.
    - id: otherValue
      type: System.String
      description: The other value to compare.
    return:
      type: System.Int32
      description: A <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> containing the index of the first non-matching character, otherwise returns -1 if the strings are identical.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOfFirstDifference(value As String, otherValue As String) As Integer
  overload: Mozzarella.StringExtensions.IndexOfFirstDifference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">otherValue</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IsAllDigits(System.String)
  commentId: M:Mozzarella.StringExtensions.IsAllDigits(System.String)
  id: IsAllDigits(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsAllDigits(String)
  nameWithType: StringExtensions.IsAllDigits(String)
  fullName: Mozzarella.StringExtensions.IsAllDigits(System.String)
  type: Method
  source:
    id: IsAllDigits
    path: ''
    startLine: 1358
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nDetermines whether <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains only numeric digits.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is an empty string the return value is false.</p>\n"
  example: []
  syntax:
    content: public static bool IsAllDigits(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to check the contents of.
    return:
      type: System.Boolean
      description: <code>true</code> if <code data-dev-comment-type="paramref" class="paramref">value</code> contains only numeric digits; otherwise, <code>false</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAllDigits(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsAllDigits*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Like(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.Like(System.String,System.String,System.Boolean)
  id: Like(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Like(String, String, Boolean)
  nameWithType: StringExtensions.Like(String, String, Boolean)
  fullName: Mozzarella.StringExtensions.Like(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: Like
    path: ''
    startLine: 1383
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nPerforms an operation similar to a T-Sql &apos;like&apos; on a string.\n"
  remarks: "\n<p>Use % as a wildcard for any character or characters, and _ as a wild card for any single character.</p>\n<p>This method is &apos;allocation heavy&apos;. It&apos;s fine for use in execution paths that are infrequent/not performance critical, but in other \nsuch places a fine tuned manual implementation would be better.</p>\n"
  example: []
  syntax:
    content: public static bool Like(this string value, string pattern, bool caseInsensitive)
    parameters:
    - id: value
      type: System.String
      description: The string to search.
    - id: pattern
      type: System.String
      description: The partial string to match, including wild cards.
    - id: caseInsensitive
      type: System.Boolean
      description: If true case is ignored when matching strings, if false case sensitivity applies.
    return:
      type: System.Boolean
      description: True if the partial string to match is found in the <code data-dev-comment-type="paramref" class="paramref">value</code> string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Like(value As String, pattern As String, caseInsensitive As Boolean) As Boolean
  overload: Mozzarella.StringExtensions.Like*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">pattern</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.StripSuffix(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.StripSuffix(System.String,System.String)
  id: StripSuffix(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: StripSuffix(String, String)
  nameWithType: StringExtensions.StripSuffix(String, String)
  fullName: Mozzarella.StringExtensions.StripSuffix(System.String, System.String)
  type: Method
  source:
    id: StripSuffix
    path: ''
    startLine: 1412
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> ends with <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code> then returns a new string without the suffix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: "\n<p>This overload is case sensitive. For a case insensitive version use <xref href=\"Mozzarella.StringExtensions.StripSuffix(System.String%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with ignoreCase set to true.</p>\n"
  example: []
  syntax:
    content: public static string StripSuffix(this string value, string suffix)
    parameters:
    - id: value
      type: System.String
      description: The value to strip the suffix from.
    - id: suffix
      type: System.String
      description: The suffix to be stripped.
    return:
      type: System.String
      description: Either a new string without the specified suffix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripSuffix(value As String, suffix As String) As String
  overload: Mozzarella.StringExtensions.StripSuffix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">suffix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.StripSuffix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.StripSuffix(System.String,System.String,System.Boolean)
  id: StripSuffix(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: StripSuffix(String, String, Boolean)
  nameWithType: StringExtensions.StripSuffix(String, String, Boolean)
  fullName: Mozzarella.StringExtensions.StripSuffix(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: StripSuffix
    path: ''
    startLine: 1426
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> ends with <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code> then returns a new string without the suffix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: This overload is case sensitive. For a case insensitive version use <xref href="Mozzarella.StringExtensions.StripSuffix(System.String%2cSystem.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> with ignoreCase set to true.
  example: []
  syntax:
    content: public static string StripSuffix(this string value, string suffix, bool ignoreCase)
    parameters:
    - id: value
      type: System.String
      description: The value to strip the suffix from.
    - id: suffix
      type: System.String
      description: The suffix to be stripped.
    - id: ignoreCase
      type: System.Boolean
      description: A boolean indicating whether or not to match the suffix in a case sensitive (true) or insensitive (false) manner.
    return:
      type: System.String
      description: Either a new string without the specified suffix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripSuffix(value As String, suffix As String, ignoreCase As Boolean) As String
  overload: Mozzarella.StringExtensions.StripSuffix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">suffix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.StripPrefix(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.StripPrefix(System.String,System.String)
  id: StripPrefix(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: StripPrefix(String, String)
  nameWithType: StringExtensions.StripPrefix(String, String)
  fullName: Mozzarella.StringExtensions.StripPrefix(System.String, System.String)
  type: Method
  source:
    id: StripPrefix
    path: ''
    startLine: 1447
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> ends with <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code> then returns a new string without the prefix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: "\n<p>This overload is case sensitive. For a case insensitive version use <xref href=\"Mozzarella.StringExtensions.StripPrefix(System.String%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with ignoreCase set to true.</p>\n"
  example: []
  syntax:
    content: public static string StripPrefix(this string value, string prefix)
    parameters:
    - id: value
      type: System.String
      description: The value to strip the prefix from.
    - id: prefix
      type: System.String
      description: The prefix to be stripped.
    return:
      type: System.String
      description: Either a new string without the specified prefix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripPrefix(value As String, prefix As String) As String
  overload: Mozzarella.StringExtensions.StripPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">prefix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.StripPrefix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.StripPrefix(System.String,System.String,System.Boolean)
  id: StripPrefix(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: StripPrefix(String, String, Boolean)
  nameWithType: StringExtensions.StripPrefix(String, String, Boolean)
  fullName: Mozzarella.StringExtensions.StripPrefix(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: StripPrefix
    path: ''
    startLine: 1461
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> ends with <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code> then returns a new string without the prefix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: This overload is case sensitive. For a case insensitive version use <xref href="Mozzarella.StringExtensions.StripPrefix(System.String%2cSystem.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> with ignoreCase set to true.
  example: []
  syntax:
    content: public static string StripPrefix(this string value, string prefix, bool ignoreCase)
    parameters:
    - id: value
      type: System.String
      description: The value to strip the prefix from.
    - id: prefix
      type: System.String
      description: The prefix to be stripped.
    - id: ignoreCase
      type: System.Boolean
      description: A boolean indicating whether or not to match the prefix in a case sensitive (true) or insensitive (false) manner.
    return:
      type: System.String
      description: Either a new string without the specified prefix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripPrefix(value As String, prefix As String, ignoreCase As Boolean) As String
  overload: Mozzarella.StringExtensions.StripPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">prefix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AddSuffix(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.AddSuffix(System.String,System.String)
  id: AddSuffix(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AddSuffix(String, String)
  nameWithType: StringExtensions.AddSuffix(String, String)
  fullName: Mozzarella.StringExtensions.AddSuffix(System.String, System.String)
  type: Method
  source:
    id: AddSuffix
    path: ''
    startLine: 1482
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does NOT end with <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code> then returns a new string with the suffix appended, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: "\n<p>This overload is case sensitive. For a case insensitive version use <xref href=\"Mozzarella.StringExtensions.AddSuffix(System.String%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with ignoreCase set to true.</p>\n"
  example: []
  syntax:
    content: public static string AddSuffix(this string value, string suffix)
    parameters:
    - id: value
      type: System.String
      description: The value to add the suffix from.
    - id: suffix
      type: System.String
      description: The suffix to be added.
    return:
      type: System.String
      description: Either a new string with the specified suffix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSuffix(value As String, suffix As String) As String
  overload: Mozzarella.StringExtensions.AddSuffix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">suffix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AddSuffix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.AddSuffix(System.String,System.String,System.Boolean)
  id: AddSuffix(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AddSuffix(String, String, Boolean)
  nameWithType: StringExtensions.AddSuffix(String, String, Boolean)
  fullName: Mozzarella.StringExtensions.AddSuffix(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: AddSuffix
    path: ''
    startLine: 1496
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does NOT end with <code data-dev-comment-type=\"paramref\" class=\"paramref\">suffix</code> then returns a new string with the suffix appended, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: This overload is case sensitive. For a case insensitive version use <xref href="Mozzarella.StringExtensions.AddSuffix(System.String%2cSystem.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> with ignoreCase set to true.
  example: []
  syntax:
    content: public static string AddSuffix(this string value, string suffix, bool ignoreCase)
    parameters:
    - id: value
      type: System.String
      description: The value to add the suffix from.
    - id: suffix
      type: System.String
      description: The suffix to be added.
    - id: ignoreCase
      type: System.Boolean
      description: A boolean indicating whether or not to match the suffix in a case sensitive (true) or insensitive (false) manner.
    return:
      type: System.String
      description: Either a new string with the specified suffix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddSuffix(value As String, suffix As String, ignoreCase As Boolean) As String
  overload: Mozzarella.StringExtensions.AddSuffix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">suffix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AddPrefix(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.AddPrefix(System.String,System.String)
  id: AddPrefix(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AddPrefix(String, String)
  nameWithType: StringExtensions.AddPrefix(String, String)
  fullName: Mozzarella.StringExtensions.AddPrefix(System.String, System.String)
  type: Method
  source:
    id: AddPrefix
    path: ''
    startLine: 1517
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> does NOT start with <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code> then returns a new string with the prefix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: "\n<p>This overload is case sensitive. For a case insensitive version use <xref href=\"Mozzarella.StringExtensions.AddPrefix(System.String%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with ignoreCase set to true.</p>\n"
  example: []
  syntax:
    content: public static string AddPrefix(this string value, string prefix)
    parameters:
    - id: value
      type: System.String
      description: The value to add the prefix to.
    - id: prefix
      type: System.String
      description: The prefix to be added.
    return:
      type: System.String
      description: Either a new string without the specified prefix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddPrefix(value As String, prefix As String) As String
  overload: Mozzarella.StringExtensions.AddPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">prefix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AddPrefix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.AddPrefix(System.String,System.String,System.Boolean)
  id: AddPrefix(System.String,System.String,System.Boolean)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AddPrefix(String, String, Boolean)
  nameWithType: StringExtensions.AddPrefix(String, String, Boolean)
  fullName: Mozzarella.StringExtensions.AddPrefix(System.String, System.String, System.Boolean)
  type: Method
  source:
    id: AddPrefix
    path: ''
    startLine: 1531
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> ends with <code data-dev-comment-type=\"paramref\" class=\"paramref\">prefix</code> then returns a new string without the prefix, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: This overload is case sensitive. For a case insensitive version use <xref href="Mozzarella.StringExtensions.AddPrefix(System.String%2cSystem.String%2cSystem.Boolean)" data-throw-if-not-resolved="false"></xref> with ignoreCase set to true.
  example: []
  syntax:
    content: public static string AddPrefix(this string value, string prefix, bool ignoreCase)
    parameters:
    - id: value
      type: System.String
      description: The value to add the prefix to.
    - id: prefix
      type: System.String
      description: The prefix to be added.
    - id: ignoreCase
      type: System.Boolean
      description: A boolean indicating whether or not to match the prefix in a case sensitive (true) or insensitive (false) manner.
    return:
      type: System.String
      description: Either a new string without the specified prefix, or else the original string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddPrefix(value As String, prefix As String, ignoreCase As Boolean) As String
  overload: Mozzarella.StringExtensions.AddPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Throw if either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">prefix</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Coalesce(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,System.String)
  id: Coalesce(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Coalesce(String, String)
  nameWithType: StringExtensions.Coalesce(String, String)
  fullName: Mozzarella.StringExtensions.Coalesce(System.String, System.String)
  type: Method
  source:
    id: Coalesce
    path: ''
    startLine: 1553
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValue</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null, empty or contains only whitespace characters, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public static string Coalesce(this string value, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to return if it is not considered empty.
    - id: otherValue
      type: System.String
      description: The second value to return if the first is considered empty.
    return:
      type: System.String
      description: Either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">otherValue</code> depending on which is empty.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Coalesce(value As String, otherValue As String) As String
  overload: Mozzarella.StringExtensions.Coalesce*
  seealso:
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  id: Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Coalesce(String, CoalesceOptions, String)
  nameWithType: StringExtensions.Coalesce(String, CoalesceOptions, String)
  fullName: Mozzarella.StringExtensions.Coalesce(System.String, Mozzarella.CoalesceOptions, System.String)
  type: Method
  source:
    id: Coalesce
    path: ''
    startLine: 1568
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValue</code> if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is considered empty, otherwise returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  remarks: "\n<p>Whether or not a value is considered empty can be controlled (partially) via the <code data-dev-comment-type=\"paramref\" class=\"paramref\">options</code> argument.</p>\n"
  example: []
  syntax:
    content: public static string Coalesce(this string value, CoalesceOptions options, string otherValue)
    parameters:
    - id: value
      type: System.String
      description: The first value to return if it is not considered empty.
    - id: options
      type: Mozzarella.CoalesceOptions
      description: A set of flags from the <xref href="Mozzarella.CoalesceOptions" data-throw-if-not-resolved="false"></xref> controlling how the method behaves.
    - id: otherValue
      type: System.String
      description: The second value to return if the first is considered empty.
    return:
      type: System.String
      description: Either <code data-dev-comment-type="paramref" class="paramref">value</code> or <code data-dev-comment-type="paramref" class="paramref">otherValue</code> depending on which is empty.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Coalesce(value As String, options As CoalesceOptions, otherValue As String) As String
  overload: Mozzarella.StringExtensions.Coalesce*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  id: Coalesce(System.String,System.String[])
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Coalesce(String, String[])
  nameWithType: StringExtensions.Coalesce(String, String[])
  fullName: Mozzarella.StringExtensions.Coalesce(System.String, System.String[])
  type: Method
  source:
    id: Coalesce
    path: ''
    startLine: 1590
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> if it is not empty, otherwise returns the first non-empty, non-null, non-whitespace string from <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValues</code>.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValues</code> is null, then <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is returned.</p>\n"
  example: []
  syntax:
    content: public static string Coalesce(this string value, params string[] otherValues)
    parameters:
    - id: value
      type: System.String
      description: The first value to return if it is not considered empty.
    - id: otherValues
      type: System.String[]
      description: An array of values, in preferred order, the first non-empty, non-null, non-whitespace value to be returned.
    return:
      type: System.String
      description: Either <code data-dev-comment-type="paramref" class="paramref">value</code> or the first non-empty/null/whitespace value from <code data-dev-comment-type="paramref" class="paramref">otherValues</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Coalesce(value As String, ParamArray otherValues As String()) As String
  overload: Mozzarella.StringExtensions.Coalesce*
  seealso:
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  nameWithType.vb: StringExtensions.Coalesce(String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringExtensions.Coalesce(System.String, System.String())
  name.vb: Coalesce(String, String())
- uid: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  id: Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Coalesce(String, CoalesceOptions, String[])
  nameWithType: StringExtensions.Coalesce(String, CoalesceOptions, String[])
  fullName: Mozzarella.StringExtensions.Coalesce(System.String, Mozzarella.CoalesceOptions, System.String[])
  type: Method
  source:
    id: Coalesce
    path: ''
    startLine: 1607
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> if it is not empty, otherwise returns the first non-empty, non-null, non-whitespace string from <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValues</code>.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">otherValues</code> is null, then <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is returned.</p>\n"
  example: []
  syntax:
    content: public static string Coalesce(this string value, CoalesceOptions options, params string[] otherValues)
    parameters:
    - id: value
      type: System.String
      description: The first value to return if it is not considered empty.
    - id: options
      type: Mozzarella.CoalesceOptions
      description: A set of flags from the <xref href="Mozzarella.CoalesceOptions" data-throw-if-not-resolved="false"></xref> controlling how the method behaves.
    - id: otherValues
      type: System.String[]
      description: An array of values, in preferred order, the first non-empty, non-null, non-whitespace value to be returned.
    return:
      type: System.String
      description: Either <code data-dev-comment-type="paramref" class="paramref">value</code> or the first non-empty/null/whitespace value from <code data-dev-comment-type="paramref" class="paramref">otherValues</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Coalesce(value As String, options As CoalesceOptions, ParamArray otherValues As String()) As String
  overload: Mozzarella.StringExtensions.Coalesce*
  seealso:
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  - linkId: Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
    commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  nameWithType.vb: StringExtensions.Coalesce(String, CoalesceOptions, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringExtensions.Coalesce(System.String, Mozzarella.CoalesceOptions, System.String())
  name.vb: Coalesce(String, CoalesceOptions, String())
- uid: Mozzarella.StringExtensions.IsNullOrEmpty(System.String)
  commentId: M:Mozzarella.StringExtensions.IsNullOrEmpty(System.String)
  id: IsNullOrEmpty(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(String)
  nameWithType: StringExtensions.IsNullOrEmpty(String)
  fullName: Mozzarella.StringExtensions.IsNullOrEmpty(System.String)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 1639
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null or empty string.\n"
  remarks: "\n<p>This is a convenience method that just calls <xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string value to be checked.
    return:
      type: System.Boolean
      description: Returns true if <code data-dev-comment-type="paramref" class="paramref">value</code> is null or empty string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IsNullOrWhiteSpace(System.String)
  commentId: M:Mozzarella.StringExtensions.IsNullOrWhiteSpace(System.String)
  id: IsNullOrWhiteSpace(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrWhiteSpace(String)
  nameWithType: StringExtensions.IsNullOrWhiteSpace(String)
  fullName: Mozzarella.StringExtensions.IsNullOrWhiteSpace(System.String)
  type: Method
  source:
    id: IsNullOrWhiteSpace
    path: ''
    startLine: 1656
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null, empty string or contains only whitespace characters.\n"
  remarks: "\n<p>This is a convenience method that just calls <xref href=\"System.String.IsNullOrWhiteSpace(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.\n</p>\n"
  example: []
  syntax:
    content: public static bool IsNullOrWhiteSpace(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string value to be checked.
    return:
      type: System.Boolean
      description: Returns true if <code data-dev-comment-type="paramref" class="paramref">value</code> is null, empty string or contains only whitespace characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrWhiteSpace(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsNullOrWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.Contains(System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.Contains(System.String,System.String,System.StringComparison)
  id: Contains(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: Contains(String, String, StringComparison)
  nameWithType: StringExtensions.Contains(String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.Contains(System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: Contains
    path: ''
    startLine: 1671
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains the substring <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> as matched according to <code data-dev-comment-type=\"paramref\" class=\"paramref\">comparisonMethod</code>.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null returns false.</p>\n"
  example: []
  syntax:
    content: public static bool Contains(this string value, string searchValue, StringComparison comparisonMethod)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The value to search for.
    - id: comparisonMethod
      type: System.StringComparison
      description: A <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> value specifying rules for matching <code data-dev-comment-type="paramref" class="paramref">searchValue</code> within <code data-dev-comment-type="paramref" class="paramref">value</code>.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">value</code> contains <code data-dev-comment-type="paramref" class="paramref">searchValue</code>, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(value As String, searchValue As String, comparisonMethod As StringComparison) As Boolean
  overload: Mozzarella.StringExtensions.Contains*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.BeforeFirst(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.BeforeFirst(System.String,System.String)
  id: BeforeFirst(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: BeforeFirst(String, String)
  nameWithType: StringExtensions.BeforeFirst(String, String)
  fullName: Mozzarella.StringExtensions.BeforeFirst(System.String, System.String)
  type: Method
  source:
    id: BeforeFirst
    path: ''
    startLine: 1691
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs before the first instance of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n<p>Matching of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is done using a <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> comparison.</p>\n"
  example: []
  syntax:
    content: public static string BeforeFirst(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The value to search for.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string prior to <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeforeFirst(value As String, searchValue As String) As String
  overload: Mozzarella.StringExtensions.BeforeFirst*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.BeforeFirst(System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.BeforeFirst(System.String,System.String,System.StringComparison)
  id: BeforeFirst(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: BeforeFirst(String, String, StringComparison)
  nameWithType: StringExtensions.BeforeFirst(String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.BeforeFirst(System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: BeforeFirst
    path: ''
    startLine: 1706
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs before the first instance of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n"
  example: []
  syntax:
    content: public static string BeforeFirst(this string value, string searchValue, StringComparison comparisonMethod)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The value to search for.
    - id: comparisonMethod
      type: System.StringComparison
      description: A value from the <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> enum specfying how <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is matched (or not).
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string prior to <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeforeFirst(value As String, searchValue As String, comparisonMethod As StringComparison) As String
  overload: Mozzarella.StringExtensions.BeforeFirst*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.BeforeLast(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.BeforeLast(System.String,System.String)
  id: BeforeLast(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: BeforeLast(String, String)
  nameWithType: StringExtensions.BeforeLast(String, String)
  fullName: Mozzarella.StringExtensions.BeforeLast(System.String, System.String)
  type: Method
  source:
    id: BeforeLast
    path: ''
    startLine: 1730
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs before the last instance of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n<p>Matching of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is done using a <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> comparison.</p>\n"
  example: []
  syntax:
    content: public static string BeforeLast(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The value to search for.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string before the last occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeforeLast(value As String, searchValue As String) As String
  overload: Mozzarella.StringExtensions.BeforeLast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.BeforeLast(System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.BeforeLast(System.String,System.String,System.StringComparison)
  id: BeforeLast(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: BeforeLast(String, String, StringComparison)
  nameWithType: StringExtensions.BeforeLast(String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.BeforeLast(System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: BeforeLast
    path: ''
    startLine: 1746
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs before the last instance of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n<p>Matching of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is done using a <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> comparison.</p>\n"
  example: []
  syntax:
    content: public static string BeforeLast(this string value, string searchValue, StringComparison comparisonMethod)
    parameters:
    - id: value
      type: System.String
      description: The value to search in.
    - id: searchValue
      type: System.String
      description: The value to search for.
    - id: comparisonMethod
      type: System.StringComparison
      description: A value from the <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> enum specfying how <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is matched (or not).
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string before the last occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function BeforeLast(value As String, searchValue As String, comparisonMethod As StringComparison) As String
  overload: Mozzarella.StringExtensions.BeforeLast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AfterFirst(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.AfterFirst(System.String,System.String)
  id: AfterFirst(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AfterFirst(String, String)
  nameWithType: StringExtensions.AfterFirst(String, String)
  fullName: Mozzarella.StringExtensions.AfterFirst(System.String, System.String)
  type: Method
  source:
    id: AfterFirst
    path: ''
    startLine: 1770
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs after the first occurrence of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n<p>Matching of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is done using a <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> comparison.</p>\n"
  example: []
  syntax:
    content: public static string AfterFirst(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search within.
    - id: searchValue
      type: System.String
      description: The value to search for.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string after the first occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AfterFirst(value As String, searchValue As String) As String
  overload: Mozzarella.StringExtensions.AfterFirst*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AfterFirst(System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.AfterFirst(System.String,System.String,System.StringComparison)
  id: AfterFirst(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AfterFirst(String, String, StringComparison)
  nameWithType: StringExtensions.AfterFirst(String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.AfterFirst(System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: AfterFirst
    path: ''
    startLine: 1785
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs after the first occurrence of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string or if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.</p>\n"
  example: []
  syntax:
    content: public static string AfterFirst(this string value, string searchValue, StringComparison comparisonMethod)
    parameters:
    - id: value
      type: System.String
      description: The value to search within.
    - id: searchValue
      type: System.String
      description: The value to search for.
    - id: comparisonMethod
      type: System.StringComparison
      description: The <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> method to use when searching for <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string after the first occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AfterFirst(value As String, searchValue As String, comparisonMethod As StringComparison) As String
  overload: Mozzarella.StringExtensions.AfterFirst*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AfterLast(System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.AfterLast(System.String,System.String)
  id: AfterLast(System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AfterLast(String, String)
  nameWithType: StringExtensions.AfterLast(String, String)
  fullName: Mozzarella.StringExtensions.AfterLast(System.String, System.String)
  type: Method
  source:
    id: AfterLast
    path: ''
    startLine: 1809
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs after the last occurrence of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string, <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> or it occurs at the very end.</p>\n<p>Matching of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is done using a <xref href=\"System.StringComparison.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> comparison.</p>\n"
  example: []
  syntax:
    content: public static string AfterLast(this string value, string searchValue)
    parameters:
    - id: value
      type: System.String
      description: The value to search within.
    - id: searchValue
      type: System.String
      description: The value to search for.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string after the last occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AfterLast(value As String, searchValue As String) As String
  overload: Mozzarella.StringExtensions.AfterLast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.AfterLast(System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.AfterLast(System.String,System.String,System.StringComparison)
  id: AfterLast(System.String,System.String,System.StringComparison)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: AfterLast(String, String, StringComparison)
  nameWithType: StringExtensions.AfterLast(String, String, StringComparison)
  fullName: Mozzarella.StringExtensions.AfterLast(System.String, System.String, System.StringComparison)
  type: Method
  source:
    id: AfterLast
    path: ''
    startLine: 1824
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the portion of <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> that occurs after the last occurrence of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>Returns null if <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> is null, empty string, <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> does not occur within <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> or it occurs at the very end.</p>\n"
  example: []
  syntax:
    content: public static string AfterLast(this string value, string searchValue, StringComparison comparisonMethod)
    parameters:
    - id: value
      type: System.String
      description: The value to search within.
    - id: searchValue
      type: System.String
      description: The value to search for.
    - id: comparisonMethod
      type: System.StringComparison
      description: The <xref href="System.StringComparison" data-throw-if-not-resolved="false"></xref> method to use when searching for <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    return:
      type: System.String
      description: Either null, or a new string containing the portion of the string after the last occurrence of <code data-dev-comment-type="paramref" class="paramref">searchValue</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AfterLast(value As String, searchValue As String, comparisonMethod As StringComparison) As String
  overload: Mozzarella.StringExtensions.AfterLast*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IsOnlyDigits(System.String)
  commentId: M:Mozzarella.StringExtensions.IsOnlyDigits(System.String)
  id: IsOnlyDigits(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsOnlyDigits(String)
  nameWithType: StringExtensions.IsOnlyDigits(String)
  fullName: Mozzarella.StringExtensions.IsOnlyDigits(System.String)
  type: Method
  source:
    id: IsOnlyDigits
    path: ''
    startLine: 1845
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains only characters representing numeric digits.\n"
  remarks: "\n<p>A character is a digit if <xref href=\"System.Char.IsDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> returns true.</p>\n"
  example: []
  syntax:
    content: public static bool IsOnlyDigits(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to check.
    return:
      type: System.Boolean
      description: Returns true if <code data-dev-comment-type="paramref" class="paramref">value</code> contains only characters representing numeric digits, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOnlyDigits(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsOnlyDigits*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.StripNonDigits(System.String)
  commentId: M:Mozzarella.StringExtensions.StripNonDigits(System.String)
  id: StripNonDigits(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: StripNonDigits(String)
  nameWithType: StringExtensions.StripNonDigits(String)
  fullName: Mozzarella.StringExtensions.StripNonDigits(System.String)
  type: Method
  source:
    id: StripNonDigits
    path: ''
    startLine: 1868
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all non-digit characters from a string and returns the result.\n"
  remarks: "\n<p>If value contains only digits then this method returns <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> and minimises allocations.</p>\n"
  example: []
  syntax:
    content: public static string StripNonDigits(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to strip values from.
    return:
      type: System.String
      description: A string containing only the numeric characters of <code data-dev-comment-type="paramref" class="paramref">value</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function StripNonDigits(value As String) As String
  overload: Mozzarella.StringExtensions.StripNonDigits*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">value</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.RemoveAllWhiteSpace(System.String)
  commentId: M:Mozzarella.StringExtensions.RemoveAllWhiteSpace(System.String)
  id: RemoveAllWhiteSpace(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: RemoveAllWhiteSpace(String)
  nameWithType: StringExtensions.RemoveAllWhiteSpace(String)
  fullName: Mozzarella.StringExtensions.RemoveAllWhiteSpace(System.String)
  type: Method
  source:
    id: RemoveAllWhiteSpace
    path: ''
    startLine: 1903
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all whitespace characters, regardless of where they appear in <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> and returns a new string containing the result.\n"
  remarks: "\n<p>If no whitespace characters are found the original string is returned.</p>\n"
  example: []
  syntax:
    content: public static string RemoveAllWhiteSpace(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to remove white space characters from.
    return:
      type: System.String
      description: A string containing <code data-dev-comment-type="paramref" class="paramref">value</code> without any whitespace characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveAllWhiteSpace(value As String) As String
  overload: Mozzarella.StringExtensions.RemoveAllWhiteSpace*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IsOnlyAlphas(System.String)
  commentId: M:Mozzarella.StringExtensions.IsOnlyAlphas(System.String)
  id: IsOnlyAlphas(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsOnlyAlphas(String)
  nameWithType: StringExtensions.IsOnlyAlphas(String)
  fullName: Mozzarella.StringExtensions.IsOnlyAlphas(System.String)
  type: Method
  source:
    id: IsOnlyAlphas
    path: ''
    startLine: 1935
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains only (latin) alphabetic characters (A-Z, a-z).\n"
  remarks: "\n<p>Returns false if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null or empty string.</p>\n"
  example: []
  syntax:
    content: public static bool IsOnlyAlphas(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to test the characters of.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">value</code> contains only latin alphabetic characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsOnlyAlphas(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsOnlyAlphas*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringExtensions.IsAlphanumeric(System.String)
  commentId: M:Mozzarella.StringExtensions.IsAlphanumeric(System.String)
  id: IsAlphanumeric(System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringExtensions
  langs:
  - csharp
  - vb
  name: IsAlphanumeric(String)
  nameWithType: StringExtensions.IsAlphanumeric(String)
  fullName: Mozzarella.StringExtensions.IsAlphanumeric(System.String)
  type: Method
  source:
    id: IsAlphanumeric
    path: ''
    startLine: 1957
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> contains only (latin) alphabetic or numeric characters (A-Z, a-z, 0-9).\n"
  remarks: "\n<p>Returns false if <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> is null or empty string.</p>\n"
  example: []
  syntax:
    content: public static bool IsAlphanumeric(this string value)
    parameters:
    - id: value
      type: System.String
      description: The string to test the characters of.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">value</code> contains only latin alphabetic and/or numeric characters.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAlphanumeric(value As String) As Boolean
  overload: Mozzarella.StringExtensions.IsAlphanumeric*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Mozzarella
  commentId: N:Mozzarella
  isExternal: false
  name: Mozzarella
  nameWithType: Mozzarella
  fullName: Mozzarella
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String.Empty
  commentId: F:System.String.Empty
- uid: Mozzarella.StringExtensions.Truncate*
  commentId: Overload:Mozzarella.StringExtensions.Truncate
  isExternal: false
  name: Truncate
  nameWithType: StringExtensions.Truncate
  fullName: Mozzarella.StringExtensions.Truncate
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String.Equals(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Equals(System.String,System.String,System.StringComparison)
- uid: System.StringComparison.OrdinalIgnoreCase
  commentId: F:System.StringComparison.OrdinalIgnoreCase
- uid: Mozzarella.StringExtensions.OCIEquals*
  commentId: Overload:Mozzarella.StringExtensions.OCIEquals
  isExternal: false
  name: OCIEquals
  nameWithType: StringExtensions.OCIEquals
  fullName: Mozzarella.StringExtensions.OCIEquals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.StringComparison.Ordinal
  commentId: F:System.StringComparison.Ordinal
- uid: Mozzarella.StringExtensions.OEquals*
  commentId: Overload:Mozzarella.StringExtensions.OEquals
  isExternal: false
  name: OEquals
  nameWithType: StringExtensions.OEquals
  fullName: Mozzarella.StringExtensions.OEquals
- uid: System.StringComparison.CurrentCultureIgnoreCase
  commentId: F:System.StringComparison.CurrentCultureIgnoreCase
- uid: Mozzarella.StringExtensions.CIEquals*
  commentId: Overload:Mozzarella.StringExtensions.CIEquals
  isExternal: false
  name: CIEquals
  nameWithType: StringExtensions.CIEquals
  fullName: Mozzarella.StringExtensions.CIEquals
- uid: System.String.Compare(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Compare(System.String,System.String,System.StringComparison)
- uid: Mozzarella.StringExtensions.OCICompare*
  commentId: Overload:Mozzarella.StringExtensions.OCICompare
  isExternal: false
  name: OCICompare
  nameWithType: StringExtensions.OCICompare
  fullName: Mozzarella.StringExtensions.OCICompare
- uid: Mozzarella.StringExtensions.CICompare*
  commentId: Overload:Mozzarella.StringExtensions.CICompare
  isExternal: false
  name: CICompare
  nameWithType: StringExtensions.CICompare
  fullName: Mozzarella.StringExtensions.CICompare
- uid: Mozzarella.StringExtensions.CIContains*
  commentId: Overload:Mozzarella.StringExtensions.CIContains
  isExternal: false
  name: CIContains
  nameWithType: StringExtensions.CIContains
  fullName: Mozzarella.StringExtensions.CIContains
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: Mozzarella.StringExtensions.OCIContains*
  commentId: Overload:Mozzarella.StringExtensions.OCIContains
  isExternal: false
  name: OCIContains
  nameWithType: StringExtensions.OCIContains
  fullName: Mozzarella.StringExtensions.OCIContains
- uid: Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.OCIReplace(System.String,System.String,System.String)
- uid: Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
  commentId: M:Mozzarella.StringExtensions.Replace(System.String,System.String,System.String,System.StringComparison)
- uid: Mozzarella.StringExtensions.CIReplace*
  commentId: Overload:Mozzarella.StringExtensions.CIReplace
  isExternal: false
  name: CIReplace
  nameWithType: StringExtensions.CIReplace
  fullName: Mozzarella.StringExtensions.CIReplace
- uid: Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
  commentId: M:Mozzarella.StringExtensions.CIReplace(System.String,System.String,System.String)
- uid: Mozzarella.StringExtensions.OCIReplace*
  commentId: Overload:Mozzarella.StringExtensions.OCIReplace
  isExternal: false
  name: OCIReplace
  nameWithType: StringExtensions.OCIReplace
  fullName: Mozzarella.StringExtensions.OCIReplace
- uid: System.String.Replace(System.String,System.String)
  commentId: M:System.String.Replace(System.String,System.String)
- uid: System.StringComparison
  commentId: T:System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  nameWithType: StringComparison
  fullName: System.StringComparison
- uid: Mozzarella.StringExtensions.Replace*
  commentId: Overload:Mozzarella.StringExtensions.Replace
  isExternal: false
  name: Replace
  nameWithType: StringExtensions.Replace
  fullName: Mozzarella.StringExtensions.Replace
- uid: Mozzarella.StringExtensions.IndexOfFirstDifference*
  commentId: Overload:Mozzarella.StringExtensions.IndexOfFirstDifference
  isExternal: false
  name: IndexOfFirstDifference
  nameWithType: StringExtensions.IndexOfFirstDifference
  fullName: Mozzarella.StringExtensions.IndexOfFirstDifference
- uid: Mozzarella.StringExtensions.IsAllDigits*
  commentId: Overload:Mozzarella.StringExtensions.IsAllDigits
  isExternal: false
  name: IsAllDigits
  nameWithType: StringExtensions.IsAllDigits
  fullName: Mozzarella.StringExtensions.IsAllDigits
- uid: Mozzarella.StringExtensions.Like*
  commentId: Overload:Mozzarella.StringExtensions.Like
  isExternal: false
  name: Like
  nameWithType: StringExtensions.Like
  fullName: Mozzarella.StringExtensions.Like
- uid: Mozzarella.StringExtensions.StripSuffix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.StripSuffix(System.String,System.String,System.Boolean)
- uid: Mozzarella.StringExtensions.StripSuffix*
  commentId: Overload:Mozzarella.StringExtensions.StripSuffix
  isExternal: false
  name: StripSuffix
  nameWithType: StringExtensions.StripSuffix
  fullName: Mozzarella.StringExtensions.StripSuffix
- uid: Mozzarella.StringExtensions.StripPrefix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.StripPrefix(System.String,System.String,System.Boolean)
- uid: Mozzarella.StringExtensions.StripPrefix*
  commentId: Overload:Mozzarella.StringExtensions.StripPrefix
  isExternal: false
  name: StripPrefix
  nameWithType: StringExtensions.StripPrefix
  fullName: Mozzarella.StringExtensions.StripPrefix
- uid: Mozzarella.StringExtensions.AddSuffix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.AddSuffix(System.String,System.String,System.Boolean)
- uid: Mozzarella.StringExtensions.AddSuffix*
  commentId: Overload:Mozzarella.StringExtensions.AddSuffix
  isExternal: false
  name: AddSuffix
  nameWithType: StringExtensions.AddSuffix
  fullName: Mozzarella.StringExtensions.AddSuffix
- uid: Mozzarella.StringExtensions.AddPrefix(System.String,System.String,System.Boolean)
  commentId: M:Mozzarella.StringExtensions.AddPrefix(System.String,System.String,System.Boolean)
- uid: Mozzarella.StringExtensions.AddPrefix*
  commentId: Overload:Mozzarella.StringExtensions.AddPrefix
  isExternal: false
  name: AddPrefix
  nameWithType: StringExtensions.AddPrefix
  fullName: Mozzarella.StringExtensions.AddPrefix
- uid: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String)
- uid: Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,System.String[])
- uid: Mozzarella.StringExtensions.Coalesce*
  commentId: Overload:Mozzarella.StringExtensions.Coalesce
  isExternal: false
  name: Coalesce
  nameWithType: StringExtensions.Coalesce
  fullName: Mozzarella.StringExtensions.Coalesce
- uid: Mozzarella.CoalesceOptions
  commentId: T:Mozzarella.CoalesceOptions
  parent: Mozzarella
  isExternal: false
  name: CoalesceOptions
  nameWithType: CoalesceOptions
  fullName: Mozzarella.CoalesceOptions
- uid: Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
  commentId: M:Mozzarella.StringExtensions.Coalesce(System.String,Mozzarella.CoalesceOptions,System.String[])
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String.IsNullOrEmpty(System.String)
  commentId: M:System.String.IsNullOrEmpty(System.String)
- uid: Mozzarella.StringExtensions.IsNullOrEmpty*
  commentId: Overload:Mozzarella.StringExtensions.IsNullOrEmpty
  isExternal: false
  name: IsNullOrEmpty
  nameWithType: StringExtensions.IsNullOrEmpty
  fullName: Mozzarella.StringExtensions.IsNullOrEmpty
- uid: System.String.IsNullOrWhiteSpace(System.String)
  commentId: M:System.String.IsNullOrWhiteSpace(System.String)
- uid: Mozzarella.StringExtensions.IsNullOrWhiteSpace*
  commentId: Overload:Mozzarella.StringExtensions.IsNullOrWhiteSpace
  isExternal: false
  name: IsNullOrWhiteSpace
  nameWithType: StringExtensions.IsNullOrWhiteSpace
  fullName: Mozzarella.StringExtensions.IsNullOrWhiteSpace
- uid: Mozzarella.StringExtensions.Contains*
  commentId: Overload:Mozzarella.StringExtensions.Contains
  isExternal: false
  name: Contains
  nameWithType: StringExtensions.Contains
  fullName: Mozzarella.StringExtensions.Contains
- uid: Mozzarella.StringExtensions.BeforeFirst*
  commentId: Overload:Mozzarella.StringExtensions.BeforeFirst
  isExternal: false
  name: BeforeFirst
  nameWithType: StringExtensions.BeforeFirst
  fullName: Mozzarella.StringExtensions.BeforeFirst
- uid: Mozzarella.StringExtensions.BeforeLast*
  commentId: Overload:Mozzarella.StringExtensions.BeforeLast
  isExternal: false
  name: BeforeLast
  nameWithType: StringExtensions.BeforeLast
  fullName: Mozzarella.StringExtensions.BeforeLast
- uid: Mozzarella.StringExtensions.AfterFirst*
  commentId: Overload:Mozzarella.StringExtensions.AfterFirst
  isExternal: false
  name: AfterFirst
  nameWithType: StringExtensions.AfterFirst
  fullName: Mozzarella.StringExtensions.AfterFirst
- uid: Mozzarella.StringExtensions.AfterLast*
  commentId: Overload:Mozzarella.StringExtensions.AfterLast
  isExternal: false
  name: AfterLast
  nameWithType: StringExtensions.AfterLast
  fullName: Mozzarella.StringExtensions.AfterLast
- uid: System.Char.IsDigit(System.Char)
  commentId: M:System.Char.IsDigit(System.Char)
- uid: Mozzarella.StringExtensions.IsOnlyDigits*
  commentId: Overload:Mozzarella.StringExtensions.IsOnlyDigits
  isExternal: false
  name: IsOnlyDigits
  nameWithType: StringExtensions.IsOnlyDigits
  fullName: Mozzarella.StringExtensions.IsOnlyDigits
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Mozzarella.StringExtensions.StripNonDigits*
  commentId: Overload:Mozzarella.StringExtensions.StripNonDigits
  isExternal: false
  name: StripNonDigits
  nameWithType: StringExtensions.StripNonDigits
  fullName: Mozzarella.StringExtensions.StripNonDigits
- uid: Mozzarella.StringExtensions.RemoveAllWhiteSpace*
  commentId: Overload:Mozzarella.StringExtensions.RemoveAllWhiteSpace
  isExternal: false
  name: RemoveAllWhiteSpace
  nameWithType: StringExtensions.RemoveAllWhiteSpace
  fullName: Mozzarella.StringExtensions.RemoveAllWhiteSpace
- uid: Mozzarella.StringExtensions.IsOnlyAlphas*
  commentId: Overload:Mozzarella.StringExtensions.IsOnlyAlphas
  isExternal: false
  name: IsOnlyAlphas
  nameWithType: StringExtensions.IsOnlyAlphas
  fullName: Mozzarella.StringExtensions.IsOnlyAlphas
- uid: Mozzarella.StringExtensions.IsAlphanumeric*
  commentId: Overload:Mozzarella.StringExtensions.IsAlphanumeric
  isExternal: false
  name: IsAlphanumeric
  nameWithType: StringExtensions.IsAlphanumeric
  fullName: Mozzarella.StringExtensions.IsAlphanumeric
