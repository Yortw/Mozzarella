### YamlMime:ManagedReference
items:
- uid: Mozzarella.StringBuilderExtensions
  commentId: T:Mozzarella.StringBuilderExtensions
  id: StringBuilderExtensions
  parent: Mozzarella
  children:
  - Mozzarella.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String,System.String)
  - Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Func{System.String})
  - Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)
  - Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})
  - Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IList{System.String})
  - Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.String[])
  - Mozzarella.StringBuilderExtensions.Contains(System.Text.StringBuilder,System.String)
  - Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)
  - Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)
  - Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String)
  - Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String,System.Int32)
  - Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder)
  - Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder,System.Globalization.CultureInfo)
  - Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder)
  - Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder,System.Globalization.CultureInfo)
  - Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder)
  - Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder,System.Char[])
  - Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)
  - Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])
  - Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)
  - Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])
  langs:
  - csharp
  - vb
  name: StringBuilderExtensions
  nameWithType: StringBuilderExtensions
  fullName: Mozzarella.StringBuilderExtensions
  type: Class
  source:
    id: StringBuilderExtensions
    path: ''
    startLine: 586
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nExtension methods for <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class StringBuilderExtensions
    content.vb: Public Module StringBuilderExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.String[])
  commentId: M:Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.String[])
  id: AppendJoin(System.Text.StringBuilder,System.String,System.String[])
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: AppendJoin(StringBuilder, String, String[])
  nameWithType: StringBuilderExtensions.AppendJoin(StringBuilder, String, String[])
  fullName: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.String[])
  type: Method
  source:
    id: AppendJoin
    path: ''
    startLine: 605
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAppends all the strings in <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> to <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> placing <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> between each part.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> is null or zero length, nothing is appended (and no exception is thrown).</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains only a single item then <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is not used.</p>\n<p>No <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is placed as the start even if <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> is not empty.</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains any null values an empty string is appended instead.</p>\n"
  example: []
  syntax:
    content: public static StringBuilder AppendJoin(this StringBuilder builder, string separator, params string[] parts)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: separator
      type: System.String
      description: The value to place between each new appended part. If null or empty string, no separator is used.
    - id: parts
      type: System.String[]
      description: An array of strings to be appended.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>, allowing method calls to be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendJoin(builder As StringBuilder, separator As String, ParamArray parts As String()) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.AppendJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  nameWithType.vb: StringBuilderExtensions.AppendJoin(StringBuilder, String, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.String())
  name.vb: AppendJoin(StringBuilder, String, String())
- uid: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IList{System.String})
  commentId: M:Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IList{System.String})
  id: AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IList{System.String})
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: AppendJoin(StringBuilder, String, IList<String>)
  nameWithType: StringBuilderExtensions.AppendJoin(StringBuilder, String, IList<String>)
  fullName: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.Collections.Generic.IList<System.String>)
  type: Method
  source:
    id: AppendJoin
    path: ''
    startLine: 634
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAppends all the strings in <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> to <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> placing <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> between each part.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> is null or contains no items, nothing is appended (and no exception is thrown).</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains only a single item then <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is not used.</p>\n<p>No <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is placed as the start even if <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> is not empty.</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains any null values an empty string is appended instead.</p>\n"
  example: []
  syntax:
    content: public static StringBuilder AppendJoin(this StringBuilder builder, string separator, IList<string> parts)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: separator
      type: System.String
      description: The value to place between each new appended part. If null or empty string, no separator is used.
    - id: parts
      type: System.Collections.Generic.IList{System.String}
      description: An array of strings to be appended.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>, allowing method calls to be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendJoin(builder As StringBuilder, separator As String, parts As IList(Of String)) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.AppendJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  nameWithType.vb: StringBuilderExtensions.AppendJoin(StringBuilder, String, IList(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.Collections.Generic.IList(Of System.String))
  name.vb: AppendJoin(StringBuilder, String, IList(Of String))
- uid: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})
  id: AppendJoin(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{System.String})
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: AppendJoin(StringBuilder, String, IEnumerable<String>)
  nameWithType: StringBuilderExtensions.AppendJoin(StringBuilder, String, IEnumerable<String>)
  fullName: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    id: AppendJoin
    path: ''
    startLine: 663
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAppends all the strings in <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> to <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> placing <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> between each part.\n"
  remarks: "\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> is null or contains no items, nothing is appended (and no exception is thrown).</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains only a single item then <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is not used.</p>\n<p>No <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> is placed as the start even if <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> is not empty.</p>\n<p>If <code data-dev-comment-type=\"paramref\" class=\"paramref\">parts</code> contains any null values an empty string is appended instead.</p>\n"
  example: []
  syntax:
    content: public static StringBuilder AppendJoin(this StringBuilder builder, string separator, IEnumerable<string> parts)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: separator
      type: System.String
      description: The value to place between each new appended part. If null or empty string, no separator is used.
    - id: parts
      type: System.Collections.Generic.IEnumerable{System.String}
      description: An array of strings to be appended.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>, allowing method calls to be chained.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendJoin(builder As StringBuilder, separator As String, parts As IEnumerable(Of String)) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.AppendJoin*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  nameWithType.vb: StringBuilderExtensions.AppendJoin(StringBuilder, String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.AppendJoin(System.Text.StringBuilder, System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AppendJoin(StringBuilder, String, IEnumerable(Of String))
- uid: Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)
  commentId: M:Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String)
  id: IndexOf(System.Text.StringBuilder,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: IndexOf(StringBuilder, String)
  nameWithType: StringBuilderExtensions.IndexOf(StringBuilder, String)
  fullName: Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder, System.String)
  type: Method
  source:
    id: IndexOf
    path: ''
    startLine: 700
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the ordinal position of the start of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> within <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  example: []
  syntax:
    content: public static int IndexOf(this StringBuilder builder, string searchValue)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The string builder to search the contents of.
    - id: searchValue
      type: System.String
      description: The string to search for.
    return:
      type: System.Int32
      description: Returns -1 if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> does not exist within <code data-dev-comment-type="paramref" class="paramref">builder</code>, otherwise returns the ordinal position at which <code data-dev-comment-type="paramref" class="paramref">searchValue</code> starts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(builder As StringBuilder, searchValue As String) As Integer
  overload: Mozzarella.StringBuilderExtensions.IndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)
  commentId: M:Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder,System.String,System.Int32)
  id: IndexOf(System.Text.StringBuilder,System.String,System.Int32)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: IndexOf(StringBuilder, String, Int32)
  nameWithType: StringBuilderExtensions.IndexOf(StringBuilder, String, Int32)
  fullName: Mozzarella.StringBuilderExtensions.IndexOf(System.Text.StringBuilder, System.String, System.Int32)
  type: Method
  source:
    id: IndexOf
    path: ''
    startLine: 718
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the ordinal position of the start of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> within <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>This method uses ordinal comparisions when searching for <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.</p>\n"
  example: []
  syntax:
    content: public static int IndexOf(this StringBuilder builder, string searchValue, int startIndex)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The string builder to search the contents of.
    - id: searchValue
      type: System.String
      description: The string to search for.
    - id: startIndex
      type: System.Int32
      description: The first character position at which to start the search.
    return:
      type: System.Int32
      description: Returns -1 if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> does not exist within <code data-dev-comment-type="paramref" class="paramref">builder</code>, otherwise returns the ordinal position at which <code data-dev-comment-type="paramref" class="paramref">searchValue</code> starts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexOf(builder As StringBuilder, searchValue As String, startIndex As Integer) As Integer
  overload: Mozzarella.StringBuilderExtensions.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">startIndex</code> is less than 0 or greater than the length of the string builder.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String)
  commentId: M:Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String)
  id: LastIndexOf(System.Text.StringBuilder,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf(StringBuilder, String)
  nameWithType: StringBuilderExtensions.LastIndexOf(StringBuilder, String)
  fullName: Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder, System.String)
  type: Method
  source:
    id: LastIndexOf
    path: ''
    startLine: 766
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the last ordinal position of the start of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> within <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  example: []
  syntax:
    content: public static int LastIndexOf(this StringBuilder builder, string searchValue)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The string builder to search the contents of.
    - id: searchValue
      type: System.String
      description: The string to search for.
    return:
      type: System.Int32
      description: Returns -1 if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> does not exist within <code data-dev-comment-type="paramref" class="paramref">builder</code>, otherwise returns the ordinal position at which <code data-dev-comment-type="paramref" class="paramref">searchValue</code> starts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastIndexOf(builder As StringBuilder, searchValue As String) As Integer
  overload: Mozzarella.StringBuilderExtensions.LastIndexOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String,System.Int32)
  commentId: M:Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder,System.String,System.Int32)
  id: LastIndexOf(System.Text.StringBuilder,System.String,System.Int32)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: LastIndexOf(StringBuilder, String, Int32)
  nameWithType: StringBuilderExtensions.LastIndexOf(StringBuilder, String, Int32)
  fullName: Mozzarella.StringBuilderExtensions.LastIndexOf(System.Text.StringBuilder, System.String, System.Int32)
  type: Method
  source:
    id: LastIndexOf
    path: ''
    startLine: 784
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns the last ordinal position of the start of <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code> within <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  remarks: "\n<p>This method uses ordinal comparisions when searching for <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.</p>\n"
  example: []
  syntax:
    content: public static int LastIndexOf(this StringBuilder builder, string searchValue, int startIndex)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The string builder to search the contents of.
    - id: searchValue
      type: System.String
      description: The string to search for.
    - id: startIndex
      type: System.Int32
      description: The first character position at which to start the search.
    return:
      type: System.Int32
      description: Returns -1 if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> does not exist within <code data-dev-comment-type="paramref" class="paramref">builder</code>, otherwise returns the ordinal position at which <code data-dev-comment-type="paramref" class="paramref">searchValue</code> starts.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastIndexOf(builder As StringBuilder, searchValue As String, startIndex As Integer) As Integer
  overload: Mozzarella.StringBuilderExtensions.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">startIndex</code> is less than 0 or greater than the length of the string builder.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.Contains(System.Text.StringBuilder,System.String)
  commentId: M:Mozzarella.StringBuilderExtensions.Contains(System.Text.StringBuilder,System.String)
  id: Contains(System.Text.StringBuilder,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: Contains(StringBuilder, String)
  nameWithType: StringBuilderExtensions.Contains(StringBuilder, String)
  fullName: Mozzarella.StringBuilderExtensions.Contains(System.Text.StringBuilder, System.String)
  type: Method
  source:
    id: Contains
    path: ''
    startLine: 830
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nReturns true if <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> contains <code data-dev-comment-type=\"paramref\" class=\"paramref\">searchValue</code>.\n"
  example: []
  syntax:
    content: public static bool Contains(this StringBuilder builder, string searchValue)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to search within.
    - id: searchValue
      type: System.String
      description: The <code data-dev-comment-type="paramref" class="paramref">searchValue</code> to search for.
    return:
      type: System.Boolean
      description: True if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> contains <code data-dev-comment-type="paramref" class="paramref">searchValue</code> otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(builder As StringBuilder, searchValue As String) As Boolean
  overload: Mozzarella.StringBuilderExtensions.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">searchValue</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String,System.String)
  commentId: M:Mozzarella.StringBuilderExtensions.Append(System.Text.StringBuilder,System.String,System.String)
  id: Append(System.Text.StringBuilder,System.String,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: Append(StringBuilder, String, String)
  nameWithType: StringBuilderExtensions.Append(StringBuilder, String, String)
  fullName: Mozzarella.StringBuilderExtensions.Append(System.Text.StringBuilder, System.String, System.String)
  type: Method
  source:
    id: Append
    path: ''
    startLine: 842
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nIf <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> is not empty, appends <code data-dev-comment-type=\"paramref\" class=\"paramref\">separator</code> then <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>. If <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> is empty, appends only <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder Append(this StringBuilder builder, string separator, string value)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: separator
      type: System.String
      description: The separator to append if <code data-dev-comment-type="paramref" class="paramref">builder</code> is not empty.
    - id: value
      type: System.String
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Append(builder As StringBuilder, separator As String, value As String) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.Append*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)
  commentId: M:Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)
  id: AppendIf(System.Text.StringBuilder,System.Boolean,System.String)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: AppendIf(StringBuilder, Boolean, String)
  nameWithType: StringBuilderExtensions.AppendIf(StringBuilder, Boolean, String)
  fullName: Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, System.Boolean, System.String)
  type: Method
  source:
    id: AppendIf
    path: ''
    startLine: 864
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAppends <code data-dev-comment-type=\"paramref\" class=\"paramref\">value</code> only if <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> is true, otherwise does nothing.\n"
  example: []
  syntax:
    content: public static StringBuilder AppendIf(this StringBuilder builder, bool condition, string value)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: condition
      type: System.Boolean
      description: A boolean indicating whether or not to actually append <code data-dev-comment-type="paramref" class="paramref">value</code>.
    - id: value
      type: System.String
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendIf(builder As StringBuilder, condition As Boolean, value As String) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.AppendIf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Func{System.String})
  commentId: M:Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.Func{System.String})
  id: AppendIf(System.Text.StringBuilder,System.Boolean,System.Func{System.String})
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: AppendIf(StringBuilder, Boolean, Func<String>)
  nameWithType: StringBuilderExtensions.AppendIf(StringBuilder, Boolean, Func<String>)
  fullName: Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, System.Boolean, System.Func<System.String>)
  type: Method
  source:
    id: AppendIf
    path: ''
    startLine: 882
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nAppends the result of <code data-dev-comment-type=\"paramref\" class=\"paramref\">valueFactory</code> only if <code data-dev-comment-type=\"paramref\" class=\"paramref\">condition</code> is true, otherwise does nothing.\n"
  example: []
  syntax:
    content: public static StringBuilder AppendIf(this StringBuilder builder, bool condition, Func<string> valueFactory)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to append to.
    - id: condition
      type: System.Boolean
      description: A boolean indicating whether or not to actually append the value of <code data-dev-comment-type="paramref" class="paramref">valueFactory</code>.
    - id: valueFactory
      type: System.Func{System.String}
      description: The value to append.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AppendIf(builder As StringBuilder, condition As Boolean, valueFactory As Func(Of String)) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.AppendIf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">valueFactory</code> are null.
  nameWithType.vb: StringBuilderExtensions.AppendIf(StringBuilder, Boolean, Func(Of String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.AppendIf(System.Text.StringBuilder, System.Boolean, System.Func(Of System.String))
  name.vb: AppendIf(StringBuilder, Boolean, Func(Of String))
- uid: Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder)
  commentId: M:Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder)
  id: Trim(System.Text.StringBuilder)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: Trim(StringBuilder)
  nameWithType: StringBuilderExtensions.Trim(StringBuilder)
  fullName: Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder)
  type: Method
  source:
    id: Trim
    path: ''
    startLine: 901
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all leading and trailing whitespace from <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder Trim(this StringBuilder builder)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove leading and trailing whitespace from.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Trim(builder As StringBuilder) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.Trim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)
  commentId: M:Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)
  id: TrimStart(System.Text.StringBuilder)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: TrimStart(StringBuilder)
  nameWithType: StringBuilderExtensions.TrimStart(StringBuilder)
  fullName: Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)
  type: Method
  source:
    id: TrimStart
    path: ''
    startLine: 915
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all leading whitespace from <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder TrimStart(this StringBuilder builder)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove leading whitespace from.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimStart(builder As StringBuilder) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.TrimStart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)
  commentId: M:Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)
  id: TrimEnd(System.Text.StringBuilder)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: TrimEnd(StringBuilder)
  nameWithType: StringBuilderExtensions.TrimEnd(StringBuilder)
  fullName: Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)
  type: Method
  source:
    id: TrimEnd
    path: ''
    startLine: 942
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all trailing whitespace from <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder TrimEnd(this StringBuilder builder)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove trailing whitespace from.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimEnd(builder As StringBuilder) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.TrimEnd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder,System.Char[])
  commentId: M:Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder,System.Char[])
  id: Trim(System.Text.StringBuilder,System.Char[])
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: Trim(StringBuilder, Char[])
  nameWithType: StringBuilderExtensions.Trim(StringBuilder, Char[])
  fullName: Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder, System.Char[])
  type: Method
  source:
    id: Trim
    path: ''
    startLine: 970
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all leading and trailing characters in <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> that exist within <code data-dev-comment-type=\"paramref\" class=\"paramref\">trimChars</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder Trim(this StringBuilder builder, params char[] trimChars)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove leading and trailing characters from.
    - id: trimChars
      type: System.Char[]
      description: An array of <xref href="System.Char" data-throw-if-not-resolved="false"></xref> representing the characters to be removed.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Trim(builder As StringBuilder, ParamArray trimChars As Char()) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.Trim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">trimChars</code> is null.
  nameWithType.vb: StringBuilderExtensions.Trim(StringBuilder, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.Trim(System.Text.StringBuilder, System.Char())
  name.vb: Trim(StringBuilder, Char())
- uid: Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])
  commentId: M:Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])
  id: TrimStart(System.Text.StringBuilder,System.Char[])
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: TrimStart(StringBuilder, Char[])
  nameWithType: StringBuilderExtensions.TrimStart(StringBuilder, Char[])
  fullName: Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder, System.Char[])
  type: Method
  source:
    id: TrimStart
    path: ''
    startLine: 986
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all leading characters in <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> that exist within <code data-dev-comment-type=\"paramref\" class=\"paramref\">trimChars</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder TrimStart(this StringBuilder builder, params char[] trimChars)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove leading characters from.
    - id: trimChars
      type: System.Char[]
      description: An array of <xref href="System.Char" data-throw-if-not-resolved="false"></xref> representing the characters to be removed.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimStart(builder As StringBuilder, ParamArray trimChars As Char()) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.TrimStart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">trimChars</code> is null.
  nameWithType.vb: StringBuilderExtensions.TrimStart(StringBuilder, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.TrimStart(System.Text.StringBuilder, System.Char())
  name.vb: TrimStart(StringBuilder, Char())
- uid: Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])
  commentId: M:Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])
  id: TrimEnd(System.Text.StringBuilder,System.Char[])
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: TrimEnd(StringBuilder, Char[])
  nameWithType: StringBuilderExtensions.TrimEnd(StringBuilder, Char[])
  fullName: Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, System.Char[])
  type: Method
  source:
    id: TrimEnd
    path: ''
    startLine: 1016
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nRemoves all trailing characters in <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> that exist within <code data-dev-comment-type=\"paramref\" class=\"paramref\">trimChars</code>.\n"
  example: []
  syntax:
    content: public static StringBuilder TrimEnd(this StringBuilder builder, params char[] trimChars)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> to remove trailing characters from.
    - id: trimChars
      type: System.Char[]
      description: An array of <xref href="System.Char" data-throw-if-not-resolved="false"></xref> representing the characters to be removed.
    return:
      type: System.Text.StringBuilder
      description: A reference to <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TrimEnd(builder As StringBuilder, ParamArray trimChars As Char()) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.TrimEnd*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> or <code data-dev-comment-type="paramref" class="paramref">trimChars</code> is null.
  nameWithType.vb: StringBuilderExtensions.TrimEnd(StringBuilder, Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Mozzarella.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder, System.Char())
  name.vb: TrimEnd(StringBuilder, Char())
- uid: Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder)
  commentId: M:Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder)
  id: ToUpper(System.Text.StringBuilder)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToUpper(StringBuilder)
  nameWithType: StringBuilderExtensions.ToUpper(StringBuilder)
  fullName: Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder)
  type: Method
  source:
    id: ToUpper
    path: ''
    startLine: 1045
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nEnsures/converts the entire contents of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> to uppercase characters.\n"
  example: []
  syntax:
    content: public static StringBuilder ToUpper(this StringBuilder builder)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> containing the data to be converted.
    return:
      type: System.Text.StringBuilder
      description: Returns <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUpper(builder As StringBuilder) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.ToUpper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder,System.Globalization.CultureInfo)
  commentId: M:Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder,System.Globalization.CultureInfo)
  id: ToUpper(System.Text.StringBuilder,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToUpper(StringBuilder, CultureInfo)
  nameWithType: StringBuilderExtensions.ToUpper(StringBuilder, CultureInfo)
  fullName: Mozzarella.StringBuilderExtensions.ToUpper(System.Text.StringBuilder, System.Globalization.CultureInfo)
  type: Method
  source:
    id: ToUpper
    path: ''
    startLine: 1062
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nEnsures/converts the entire contents of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> to uppercase characters.\n"
  remarks: "\n<p>The <code data-dev-comment-type=\"paramref\" class=\"paramref\">culture</code> parameter is ignored when using the net standard library as net standard does not support the <xref href=\"System.Char.ToLower(System.Char%2cSystem.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  example: []
  syntax:
    content: public static StringBuilder ToUpper(this StringBuilder builder, CultureInfo culture)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> containing the data to be converted.
    - id: culture
      type: System.Globalization.CultureInfo
      description: A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> used to determine the case of individual characters.
    return:
      type: System.Text.StringBuilder
      description: Returns <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToUpper(builder As StringBuilder, culture As CultureInfo) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.ToUpper*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder)
  commentId: M:Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder)
  id: ToLower(System.Text.StringBuilder)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToLower(StringBuilder)
  nameWithType: StringBuilderExtensions.ToLower(StringBuilder)
  fullName: Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder)
  type: Method
  source:
    id: ToLower
    path: ''
    startLine: 1088
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nEnsures/converts the entire contents of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> to lowercase characters.\n"
  example: []
  syntax:
    content: public static StringBuilder ToLower(this StringBuilder builder)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> containing the data to be converted.
    return:
      type: System.Text.StringBuilder
      description: Returns <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLower(builder As StringBuilder) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.ToLower*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder,System.Globalization.CultureInfo)
  commentId: M:Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder,System.Globalization.CultureInfo)
  id: ToLower(System.Text.StringBuilder,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: Mozzarella.StringBuilderExtensions
  langs:
  - csharp
  - vb
  name: ToLower(StringBuilder, CultureInfo)
  nameWithType: StringBuilderExtensions.ToLower(StringBuilder, CultureInfo)
  fullName: Mozzarella.StringBuilderExtensions.ToLower(System.Text.StringBuilder, System.Globalization.CultureInfo)
  type: Method
  source:
    id: ToLower
    path: ''
    startLine: 1103
  assemblies:
  - cs.temp.dll
  namespace: Mozzarella
  summary: "\nEnsures/converts the entire contents of the <code data-dev-comment-type=\"paramref\" class=\"paramref\">builder</code> to lowercase characters.\n"
  remarks: "\n<p>The <code data-dev-comment-type=\"paramref\" class=\"paramref\">culture</code> parameter is ignored when using the net standard library as net standard does not support the <xref href=\"System.Char.ToLower(System.Char%2cSystem.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p>\n"
  example: []
  syntax:
    content: public static StringBuilder ToLower(this StringBuilder builder, CultureInfo culture)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: The <xref href="System.Text.StringBuilder" data-throw-if-not-resolved="false"></xref> containing the data to be converted.
    - id: culture
      type: System.Globalization.CultureInfo
      description: A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> used to determine the case of individual characters.
    return:
      type: System.Text.StringBuilder
      description: Returns <code data-dev-comment-type="paramref" class="paramref">builder</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLower(builder As StringBuilder, culture As CultureInfo) As StringBuilder
  overload: Mozzarella.StringBuilderExtensions.ToLower*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown if <code data-dev-comment-type="paramref" class="paramref">builder</code> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  parent: System.Text
  isExternal: true
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
- uid: Mozzarella
  commentId: N:Mozzarella
  isExternal: false
  name: Mozzarella
  nameWithType: Mozzarella
  fullName: Mozzarella
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Mozzarella.StringBuilderExtensions.AppendJoin*
  commentId: Overload:Mozzarella.StringBuilderExtensions.AppendJoin
  isExternal: false
  name: AppendJoin
  nameWithType: StringBuilderExtensions.AppendJoin
  fullName: Mozzarella.StringBuilderExtensions.AppendJoin
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Mozzarella.StringBuilderExtensions.IndexOf*
  commentId: Overload:Mozzarella.StringBuilderExtensions.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: StringBuilderExtensions.IndexOf
  fullName: Mozzarella.StringBuilderExtensions.IndexOf
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: Mozzarella.StringBuilderExtensions.LastIndexOf*
  commentId: Overload:Mozzarella.StringBuilderExtensions.LastIndexOf
  isExternal: false
  name: LastIndexOf
  nameWithType: StringBuilderExtensions.LastIndexOf
  fullName: Mozzarella.StringBuilderExtensions.LastIndexOf
- uid: Mozzarella.StringBuilderExtensions.Contains*
  commentId: Overload:Mozzarella.StringBuilderExtensions.Contains
  isExternal: false
  name: Contains
  nameWithType: StringBuilderExtensions.Contains
  fullName: Mozzarella.StringBuilderExtensions.Contains
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Mozzarella.StringBuilderExtensions.Append*
  commentId: Overload:Mozzarella.StringBuilderExtensions.Append
  isExternal: false
  name: Append
  nameWithType: StringBuilderExtensions.Append
  fullName: Mozzarella.StringBuilderExtensions.Append
- uid: Mozzarella.StringBuilderExtensions.AppendIf*
  commentId: Overload:Mozzarella.StringBuilderExtensions.AppendIf
  isExternal: false
  name: AppendIf
  nameWithType: StringBuilderExtensions.AppendIf
  fullName: Mozzarella.StringBuilderExtensions.AppendIf
- uid: System.Func{System.String}
  commentId: T:System.Func{System.String}
  parent: System
  definition: System.Func`1
  name: Func<String>
  nameWithType: Func<String>
  fullName: System.Func<System.String>
  nameWithType.vb: Func(Of String)
  fullName.vb: System.Func(Of System.String)
  name.vb: Func(Of String)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Mozzarella.StringBuilderExtensions.Trim*
  commentId: Overload:Mozzarella.StringBuilderExtensions.Trim
  isExternal: false
  name: Trim
  nameWithType: StringBuilderExtensions.Trim
  fullName: Mozzarella.StringBuilderExtensions.Trim
- uid: Mozzarella.StringBuilderExtensions.TrimStart*
  commentId: Overload:Mozzarella.StringBuilderExtensions.TrimStart
  isExternal: false
  name: TrimStart
  nameWithType: StringBuilderExtensions.TrimStart
  fullName: Mozzarella.StringBuilderExtensions.TrimStart
- uid: Mozzarella.StringBuilderExtensions.TrimEnd*
  commentId: Overload:Mozzarella.StringBuilderExtensions.TrimEnd
  isExternal: false
  name: TrimEnd
  nameWithType: StringBuilderExtensions.TrimEnd
  fullName: Mozzarella.StringBuilderExtensions.TrimEnd
- uid: System.Char
  commentId: T:System.Char
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Mozzarella.StringBuilderExtensions.ToUpper*
  commentId: Overload:Mozzarella.StringBuilderExtensions.ToUpper
  isExternal: false
  name: ToUpper
  nameWithType: StringBuilderExtensions.ToUpper
  fullName: Mozzarella.StringBuilderExtensions.ToUpper
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
  commentId: M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: Mozzarella.StringBuilderExtensions.ToLower*
  commentId: Overload:Mozzarella.StringBuilderExtensions.ToLower
  isExternal: false
  name: ToLower
  nameWithType: StringBuilderExtensions.ToLower
  fullName: Mozzarella.StringBuilderExtensions.ToLower
